04/27
1. add photoresistors sampling
2. redesign photoresistors array
3. TODO: send data
4. TODO: test
5. TODO: estimate possibility and traffic

04/28
1. add audio recording, but the microphone didn't work
2. add sd card
3. Teensy audio lib design tool
4. the recorded file in the teensy is raw, converting to wav
5. resolve adc0 conflict by using adc1
6. TODO: design external filter circuit

05/03
1. add sending photoresistors data via bluetooth
2. slightly change logic of updateReadings() for photoresistors
3. input the wav file to matlab, comb filter: remove angular freq at 0, pi/2, pi, better but weaker noise at all freq domain
4. TODO: bluetooth test
5. TODO: avoid noise, extract frequency, maybe need a comparator based on amplitude
6. tested photoresistors, basic range: 10k ~ 1M. 100k resistor as R_ref

05/04
1. TODO: low pass filter
2. TODO: test with gain pin connected to VDD

05/10
1. The ADC for the light sensors has messed up what I got from the microphone
2. TODO: solve adc problem
3. TODO: fast adc

05/11
1. tested MAX9814, no that noise on the oscilloscope!
2. TODO: tomorrow, talking downstairs, watching waveform while recording
3. TODO: try the code found today

05/12
1. finished testing MAX9814
2. merge mic_test, merge test to beta branch
2. TODO: only 2 adc, what for processing MEMS MIC?
3. TODO: MEMS MIC need a amp circuit

05/17
1. finished rpi blutooth setup
2. finished sending data of pResistors to rpi
3. TODO: send raw audio data to rpi
4. TODO: try higher baudrate for bluetoorh serial
5. NOTE: script must run previous than arduino

05/21
1. get freq spectrum
2. download free bee audio file
3. TODO: what feature should be sent to the rpi?

05/24
1. finished the draft of audio features extraction
2. TODO: do it on rpi
3. FIXME: no data write to the raw file created on rpi
4. add draft of sending/receiving audio file to rpi via bluetooth

05/25
1. store data from photoresistors to a csv file
2. store freq to a csv file
3. TODO: send audio file via bt
